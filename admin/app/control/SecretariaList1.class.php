<?php/** * SecretariaList Listing * @author  <Marcelo Alves - PC > */class SecretariaList extends TStandardList{    protected $form;     // registration form    protected $datagrid; // listing    protected $pageNavigation;    protected $formgrid;    protected $deleteButton;    protected $transformCallback;    /**     * Page constructor     */    public function __construct()    {        parent::__construct();        parent::setDatabase('conexao');            // defines the database        parent::setActiveRecord('Secretaria');   // defines the active record        parent::setDefaultOrder('prenumero', 'asc');         // defines the default order        $criteria = new TCriteria;        $criteria->add(new TFilter('unidadeGestora', '=', TSession::getValue('unidadeGestora')));        parent::setCriteria($criteria); // define a standard filter        parent::addFilterField('secnome', 'like', 'secnome'); // filterField, operator, formField              // creates the form        $this->form = new TQuickForm('form_search_Secretaria');        $this->form->class = 'tform'; // change CSS class        $this->form = new BootstrapFormWrapper($this->form);        $this->form->style = 'display: table;width:100%'; // change style        $this->form->setFormTitle('Secretaria');        // create the form fields        $secnome = new TEntry('secnome');       // $unidadeGestora = new TEntry('unidadeGestora');        $unidadeGestora = new TDBCombo('unidadeGestora', 'conexao', 'Prefeitura', 'codigoUnidGestora', '{codigoUnidGestora}-{prenome}','codigoUnidGestora asc'  );        $unidadeGestora->enableSearch();        $criteria = new TCriteria;        $this->form->addQuickField('Un Gestora', $unidadeGestora, 500);        $this->form->addQuickField('Nome', $secnome, 200);                      // keep the form filled during navigation with session data        $this->form->setData(TSession::getValue('UnidadeGestora_filter_unidadegestora'));        $this->form->setData(TSession::getValue('Secretaria_filter_secnome'));        // add the search form actions        $btn_onsearch = $this->form->addQuickAction("Buscar", new TAction([$this, 'onSearch']), 'fa:search #ffffff');        $btn_onsearch->addStyleClass('btn-primary');         $btn_onexportcsv = $this->form->addQuickAction("Exportar como CSV", new TAction([$this, 'onExportCsv']), 'fa:file #FFFFFF');        $btn_onexportcsv->addStyleClass('btn-info');                 $btn_onshow = $this->form->addQuickAction("Cadastrar", new TAction(['SecretariaForm', 'onShow']), 'fa:plus #ffffff');        $btn_onshow->addStyleClass('btn-success');        // $this->form->addQuickAction(_t('Find'), new TAction(array($this, 'onSearch')), 'fa:search');        // creates a DataGrid        $this->datagrid = new TDataGrid;        $this->datagrid->style = 'width: 100%';        $this->datagrid->setHeight(320);        $this->datagrid = new BootstrapDatagridWrapper($this->datagrid);        $this->datagrid->datatable = 'true';        // $this->datagrid->enablePopover('Popover', 'Hi <b> {name} </b>');        // creates the datagrid columns        $column_prenumero = new TDataGridColumn('prenumero', 'ID', 'right');        $column_unidadeGestora = new TDataGridColumn('unidadeGestora', 'UndGes', 'right');        $column_seccodigo = new TDataGridColumn('seccodigo', 'Código', 'left');        $column_secnome = new TDataGridColumn('secnome', 'Nome', 'left');        $column_secfotor = new TDataGridColumn('secfotor', 'Foto', 'center');        $column_secfoto = new TDataGridColumn('secfoto', 'Imagem 1', 'center');        $column_secimagem = new TDataGridColumn('secimagem', 'Imagem 2', 'center');        $column_secsecretario = new TDataGridColumn('secsecretario', 'Secretário', 'left');        $column_secendereco = new TDataGridColumn('secendereco', 'Endereço', 'left');        $column_secfone = new TDataGridColumn('secfone', 'Fone', 'left');        $column_secemail = new TDataGridColumn('secemail', 'E-mail', 'left');        $column_secsexo = new TDataGridColumn('secsexo', 'Sx', 'center');        $column_sectipo = new TDataGridColumn('sectipo', 'Tp', 'center');        $column_unidadeGestora = new TDataGridColumn('unidadeGestora', 'Und Gest', 'center');          // define the transformer method over image        $column_secfotor->setTransformer(function ($value, $object, $row) {        //    $img = 'files/prefeituras/'.$object->unidadeGestora.'/secretaria/'.$value;             $img = 'files/prefeituras/'.$object->unidadeGestora.'/secretaria/'.$value;            if (file_exists($img)) {                $secfotor = new TElement('img');                $secfotor->style = "width:60px; height:60px;";                $secfotor->src = $img;                return $secfotor;            } else {                 $secfotor  = new TElement('img');                 $secfotor->style= "width:60px; height:60px;";                 $img = 'files/imagem/user.png';                 $secfotor->src = $img;                return $value;            }        });                $column_secfoto->setTransformer(function ($value, $object, $row) {        //    $img = 'files/prefeituras/'.$object->unidadeGestora.'/secretaria/'.$value;             $img = 'files/prefeituras/'.$object->unidadeGestora.'/secretaria/'.$value;            if (file_exists($img)) {                $secfoto = new TElement('img');                $secfoto->style = "width:100px; height:60px;";                $secfoto->src = $img;                return $secfoto;            } else {                 $secfoto  = new TElement('img');                 $secfoto->style= "width:100px; height:60px;";                 $img = 'files/imagem/galeria.png';                 $secfoto->src = $img;                return $value;            }        });                $column_secimagem->setTransformer(function ($value, $object, $row) {        //    $img = 'files/prefeituras/'.$object->unidadeGestora.'/secretaria/'.$value;             $img = 'files/prefeituras/'.$object->unidadeGestora.'/secretaria/'.$value;            if (file_exists($img)) {                $secimagem = new TElement('img');                $secimagem->style = "width:100px; height:60px;";                $secimagem->src = $img;                return $secimagem;            } else {                 $secimagem  = new TElement('img');                 $secimagem->style= "width:100px; height:60px;";                 $img = 'files/imagem/galeria.png';                 $secimagem->src = $img;                return $value;            }        });        // add the columns to the DataGrid        $this->datagrid->addColumn($column_prenumero);        $this->datagrid->addColumn($column_unidadeGestora);        $this->datagrid->addColumn($column_secnome);        $this->datagrid->addColumn($column_secsecretario);        $this->datagrid->addColumn($column_secfotor);        $this->datagrid->addColumn($column_secfoto);        $this->datagrid->addColumn($column_secemail);        $this->datagrid->addColumn($column_secsexo);        $this->datagrid->addColumn($column_sectipo);        $this->datagrid->addColumn($column_secendereco);        $this->datagrid->addColumn($column_secfone);        $this->datagrid->addColumn($column_secimagem);              // create EDIT action//        $action_edit = new TDataGridAction(array('ServidorList', 'onReload'));//        $action_edit->setUseButton(TRUE);//        $action_edit->setButtonClass('btn btn-default');//        $action_edit->setLabel("Servidores");//        $action_edit->setImage('fa:group green fa-lg');//        $action_edit->setField('prenumero');//        $this->datagrid->addAction($action_edit);               // create EDIT action        $action_edit = new TDataGridAction(array('SecretariaForm', 'onEdit'));        $action_edit->setUseButton(false);        $action_edit->setButtonClass('btn btn-default');        // $action_edit->setLabel(_t('Edit'));        $action_edit->setImage('fa:pencil-square-o blue fa-lg');        $action_edit->setField('prenumero');        $this->datagrid->addAction($action_edit);        // create DELETE action        $action_del = new TDataGridAction(array($this, 'onDelete'));        $action_del->setUseButton(false);        $action_del->setButtonClass('btn btn-default');        $action_del->setLabel(_t('Delete'));        $action_del->setImage('fa:trash-o red fa-lg');        $action_del->setField('prenumero');        $this->datagrid->addAction($action_del); // create EDIT action        /** @guarde        $action_edit = new TDataGridAction(array('UnidadeList', 'onReload'));        $action_edit->setUseButton(TRUE);        $action_edit->setButtonClass('btn btn-default');        $action_edit->setLabel("Unidades");        $action_edit->setImage('fa:sitemap green fa-lg');        $action_edit->setField('prenumero');        $this->datagrid->addAction($action_edit);        // create the datagrid model         *          */        $this->datagrid->createModel();        // create the page navigation        $this->pageNavigation = new TPageNavigation;        $this->pageNavigation->setAction(new TAction(array($this, 'onReload')));        $this->pageNavigation->setWidth($this->datagrid->getWidth());        // vertical box container        $container = new TVBox;        $container->style = 'width: 90%';        // $container->add(new TXMLBreadCrumb('menu.xml', __CLASS__));        $container->add(TPanelGroup::pack('Listagem de Secretarias', $this->form));        $container->add(TPanelGroup::pack('', $this->datagrid, $this->pageNavigation));        parent::add($container);    }     public function onSearch()    {        // get the search form data        $data = $this->form->getData();                // clear session filters       TSession::setValue('UnidadeGestora_filter_unidadegestora',   NULL);       TSession::setValue('Secretaria_filter_secnome',   NULL);        if (isset($data->unidadeGestora) AND ($data->unidadeGestora)) {            $filter = new TFilter('unidadeGestora', 'like', "%{$data->unidadeGestora}%"); // create the filter            TSession::setValue('UnidadeGestora_filter_unidadegestora',   $filter); // stores the filter in the session        }        if (isset($data->secnome) AND ($data->secnome)) {            $filter = new TFilter('secnome', 'like', "%{$data->secnome}%"); // create the filter            TSession::setValue('Secretaria_filter_secnome',   $filter); // stores the filter in the session        }                // fill the form with data again        $this->form->setData($data);                // keep the search data in the session        TSession::setValue('Unidade_filter_data', $data);                $param=array();        $param['offset']    =0;        $param['first_page']=1;        $this->onReload($param);    }      public function onReload($param = NULL)    {        try        {            // open a transaction with database 'conexao'            TTransaction::open('conexao');                        // creates a repository for Unidade            $repository = new TRepository('Secretaria');            $limit = 20;            // creates a criteria            $criteria = new TCriteria;                        if(isset($param['prenumero'])){                  TSession::setValue('secretaria',$param['prenumero']);                 }                                    // default order            if (empty($param['order']))            {                $param['order'] = 'prenumero';                $param['direction'] = 'asc';            }            $criteria->setProperties($param); // order, offset            $criteria->setProperty('limit', $limit);                                   if (TSession::getValue('UnidadeGestora_filter_unidadegestora')) {                $criteria->add(TSession::getValue('UnidadeGestora_filter_unidadegestora')); // add the session filter            }            if (TSession::getValue('Secretaria_filter_secnome')) {                $criteria->add(TSession::getValue('Secretaria_filter_secnome')); // add the session filter            }                        // load the objects according to criteria            $objects = $repository->load($criteria, FALSE);                        if (is_callable($this->transformCallback))            {                call_user_func($this->transformCallback, $objects, $param);            }                        $this->datagrid->clear();            if ($objects)            {                // iterate the collection of active records                foreach ($objects as $object)                {                    // add the object inside the datagrid                    $this->datagrid->addItem($object);                }            }                        // reset the criteria for record count            $criteria->resetProperties();            $count= $repository->count($criteria);                        $this->pageNavigation->setCount($count); // count of records            $this->pageNavigation->setProperties($param); // order, page            $this->pageNavigation->setLimit($limit); // limit                        // close the transaction            TTransaction::close();            $this->loaded = true;        }        catch (Exception $e) // in case of exception        {            // shows the exception error message            new TMessage('error', $e->getMessage());            // undo all pending operations            TTransaction::rollback();        }    }    public function onShow($param = null)    {        //<onShow>        //</onShow>    }       public function onExportCsv($param = null)     {        try        {            $this->onSearch();            TTransaction::open('conexao'); // open a transaction            $repository = new TRepository('Secretaria'); // creates a repository for Customer            $criteria = $this->filter_criteria;            if($filters = TSession::getValue(__CLASS__.'_filters'))            {                foreach ($filters as $filter)                 {                    $criteria->add($filter);                       }            }            $records = $repository->load($criteria); // load the objects according to criteria            if ($records)            {                $file = 'tmp/'.uniqid().'.csv';                $handle = fopen($file, 'w');                $columns = $this->datagrid->getColumns();                $csvColumns = [];                foreach($columns as $column)                {                    $csvColumns[] = $column->getLabel();                }                fputcsv($handle, $csvColumns, ';');                foreach ($records as $record)                {                    $csvColumns = [];                    foreach($columns as $column)                    {                        $name = $column->getName();                        $csvColumns[] = $record->{$name};                    }                    fputcsv($handle, $csvColumns, ';');                }                fclose($handle);                TPage::openFile($file);            }            else            {                new TMessage('info', _t('No records found'));                   }            TTransaction::close(); // close the transaction        }        catch (Exception $e) // in case of exception        {            new TMessage('error', $e->getMessage()); // shows the exception error message            TTransaction::rollback(); // undo all pending operations        }    }   }