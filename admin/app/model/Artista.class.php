<?php
/**
 * Artista Active Record
 * @author  <your-name-here>
 */
class Artista extends \Adianti\Database\TRecord
{
    const TABLENAME = 'artista';
    const PRIMARYKEY= 'artcodigo';
    const IDPOLICY =  'max'; // {max, serial}
    
    
    /**
     * Constructor method
     */
    public function __construct($id = NULL, $callObjectLoad = TRUE)
    {
        parent::__construct($id, $callObjectLoad);
        parent::addAttribute('artnome');
        parent::addAttribute('artusual');
        parent::addAttribute('artdatanasc');
        parent::addAttribute('artendereco');
        parent::addAttribute('artbairro');
        parent::addAttribute('artcep');
        parent::addAttribute('artuf');
        parent::addAttribute('artcidade');
        parent::addAttribute('artcomplemento');
        parent::addAttribute('artsexo');
        parent::addAttribute('artfone');
        parent::addAttribute('artcelular');
        parent::addAttribute('artemail');
        parent::addAttribute('artsite');
        parent::addAttribute('artfoto');
        parent::addAttribute('artbiografia');
        parent::addAttribute('arttipocodigo');
        parent::addAttribute('artcpf');
        parent::addAttribute('inscodigo');
        parent::addAttribute('artfacebook');
        parent::addAttribute('artwhatsapp');
        parent::addAttribute('arttwitter');
        parent::addAttribute('artyuotube');
        parent::addAttribute('artinstagram');
        parent::addAttribute('artgoogle');
        parent::addAttribute('artsound');
        parent::addAttribute('artsoundcloud');
        parent::addAttribute('artvinculo');
    }
    
    function getInstrumentoMusica ($musica_id) {
        $repository = new TRepository('MusicoInstrumento');
        $criteria = new TCriteria;
        $criteria->add(new TFilter('cod_musico','=', $this->artcodigo));
        $criteria->add(new TFilter('cod_musica','=', $musica_id));
        $instrumentos = [];
        $collections  = $repository->load($criteria);
        if ($collections){
          foreach($collections as $objeto){
              $instrumentos[] = new Instrumento($objeto->cod_instrumento);
          }
        }
        return $instrumentos;
    }
    
    
    function deleteInstrumentoMusica ($musica_id) {
        $repository = new TRepository('MusicoInstrumento');
        $criteria = new TCriteria;
        $criteria->add(new TFilter('cod_musico','=', $this->artcodigo));
        $criteria->add(new TFilter('cod_musica','=', $musica_id));
        $repository->delete($criteria);
    }

    /**
     * @param $idsArtistas array de ids de artistas
     * @param bool $reverse retonar os ids caso seja verdadeiro
     * @return array
     */
    static function parseIds($idsArtistas, $reverse=false){
        $artistas = [];
        if (is_array($idsArtistas)) {
            if ($idsArtistas) {
                foreach ($idsArtistas as $objeto) {
                    if ($reverse){
                        $artistas[] = $objeto->artcodigo;
                    }else{
                        $artista = new Artista($objeto);
                        $artistas[] =  $artista;
                    }
                }
            }
        }
        return $artistas;
    }


    public function toArray()
    {
        $dados =  parent::toArray();
        $dados["foto"] = FILEPATH.'artistas/'.$this->artfoto;
        return  $dados; // TODO: Change the autogenerated stub
    }


}
