<?php
/**
 * Disco Active Record
 * @author  <your-name-here>
 */
class Disco extends TRecord
{
    const TABLENAME = 'disco';
    const PRIMARYKEY= 'discodigo';
    const IDPOLICY =  'serial'; // {max, serial}
    
    
    private $musicas;

    /**
     * Constructor method
     */
    public function __construct($id = NULL, $callObjectLoad = TRUE)
    {
        parent::__construct($id, $callObjectLoad);
        parent::addAttribute('disnome');
        parent::addAttribute('artcodigo');
        parent::addAttribute('arttipocodigo');
        parent::addAttribute('bancodigo');
        parent::addAttribute('disimagem');
        parent::addAttribute('disbolacha');
        parent::addAttribute('disfrente');
        parent::addAttribute('disfundo');
        parent::addAttribute('disdata');
        parent::addAttribute('disgravadora');
        parent::addAttribute('diseditoracao');
        parent::addAttribute('dismix');
        parent::addAttribute('dismasterizacao');
        parent::addAttribute('disacesso');
        parent::addAttribute('dispreco');
        parent::addAttribute('disquantidade');
        parent::addAttribute('dissobre');
        parent::addAttribute('procodigo');
        parent::addAttribute('dismostra');
        parent::addAttribute('disprodutor');
        parent::addAttribute('disarte');
        parent::addAttribute('vidcodigo');
        parent::addAttribute('dislanca');
        }

    public function toArray()
    {
        $dados =  parent::toArray();
        $dados["imagem"] = FILEPATH.'discos/'.$this->disimagem;
        return  $dados; // TODO: Change the autogenerated stub
    }
    /**
     * Method addMusica
     * Add a Musica to the Disco
     * @param $object Instance of Musica
     */
    public function addMusica(Musica $object)
    {
        $this->musicas[] = $object;
        
    }
    
    /**
     * Method getMusicas
     * Return the Disco' Musica's
     * @return Collection of Musica
     */
    public function getMusicas()
    {
        return $this->musicas;
    }

    /**
     * Reset aggregates
     */
    public function clearParts()
    {
        $this->musicas = array();
        
    }

    /**
     * Load the object and its aggregates
     * @param $id object ID
     */
    public function load($id)
    {
    
        // load the related Musica objects
        $repository = new TRepository('MusicaDisco');
        $criteria = new TCriteria;
        $criteria->add(new TFilter('discodigo', '=', $id));
        $disco_musicas = $repository->load($criteria);
        if ($disco_musicas)
        {
            foreach ($disco_musicas as $disco_musica)
            {
                $musica = new Musica( $disco_musica->muscodigo );
                $this->addMusica($musica);
            }
        }
    
        // load the object itself
        return parent::load($id);
    }

    /**
     * Store the object and its aggregates
     */
    public function store()
    {
        // store the object itself
        parent::store();
   
        $criteria = new TCriteria;
        $criteria->add(new TFilter('discodigo', '=', $this->discodigo));
        $repository = new TRepository('MusicaDisco');
        $repository->delete($criteria);
        // store the related MusicaDisco objects
        if ($this->musicas)
        {

            foreach ($this->musicas as $musica){
                $disco_musica = new MusicaDisco;
                $disco_musica->muscodigo = $musica->muscodigo;
                $disco_musica->discodigo= $this->discodigo;
                $disco_musica->store();
            }
        }
    }

    /**
     * Delete the object and its aggregates
     * @param $id object ID
     */
    public function delete($id = NULL)
    {
        $id = isset($id) ? $id : $this->discodigo;
        // delete the related DiscoMusica objects
        $repository = new TRepository('MusicaDisco');
        $criteria = new TCriteria;
        $criteria->add(new TFilter('discodigo', '=', $id));
        $repository->delete($criteria);
        
    
        // delete the object itself
        parent::delete($id);
    }
    
    function get_Artista(){
        return new Artista($this->artcodigo);
    }

}
